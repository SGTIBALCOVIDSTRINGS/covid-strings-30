<doc.type html>
<script>
<Html>
<Head>
<UTF8>
Viewport Content=Width=Device-Width, Initial-Scale=ONE>
<Title> Covid Strings30 Second Round Bracket
<Div Id=Bracket Class=Bracket></Div>
<Script Src=Bracket.JS>
Link Rel=Stylesheet Href=Css
Head
Body
Bracket-Container{}
Matchup
Solid Zero;
Padding 
Text Align Center 
Filename=Covid Strings30 SecondROUND.JS
HIGHEST REMAINING SEED=(Greatest Remaining Num Value In Covid Strings List)
Lowest Remaining Seed = (Lowest Remaining Num Value In Covid Strings List)
Intermediate Seed1=(First Middle Remaining Value In Covid Strings List)
Intermediate Seed2=(Second Middle Remaining Value In Covid Strings List))
Round =CreateElement(Div);
CreateRound =Covid Strings30 Second Round 
Round.ClassList.Add(Round);
For (Let I = Zero; I < Teams.Length; I += Two) {
Round.AppendChild(CreateMatchup(Teams[I], Teams[I + One]));
RETURN Round;
Bracket.AppendChild(CreateRound(Teams));
MATCHUP1=(INTERMEDIATE SEED TWO VERSUS INTERMEDIATE SEED ONE)
Matchup = Document.CreateElement(Div);
Matchup.ClassList.Add(Matchup);
Matchup.InnerHTML = Div>${Team1}</Div><Div>${Team2}</Div>;
Return Matchup;
Matchup2=(LOWEST REMAINING SEED VERSUS HIGHEST REMAINING SEED)
Matchup = Document.CreateElement(Div);
Matchup.ClassList.Add(Matchup);
Matchup.InnerHTML = Div>${Team1}</Div><Div>${Team2}</Div>;
Return Matchup;
Java Util.Scanner
Java.Util
Questions[]Questions={
Question17
Question18
Question19
Question20
Question21
Question22
Question23
Question24
Question25
Question26
Collections.Shuffle(Arrays.Aslist(Questions)
AdvanceTeams=Slice(CurrentTeams)
Result= DeclareWinner(MATCHUP1)
If Intermediate Seed1 Score>=Forty:
console.log(intermediate Seed1 Advances)
else:
console.log(intermediate seed2 advances)
result=declarewinner(matchup2)
if highest remaining seed score>=forty:
console.log(highest remaining seed advances)
else:
console.log(lowest remaining seed advances)
return filename


